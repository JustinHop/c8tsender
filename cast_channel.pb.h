// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cast_channel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cast_5fchannel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cast_5fchannel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cast_5fchannel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cast_5fchannel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace extensions {
namespace core_api {
namespace cast_channel {
class AuthChallenge;
class AuthChallengeDefaultTypeInternal;
extern AuthChallengeDefaultTypeInternal _AuthChallenge_default_instance_;
class AuthError;
class AuthErrorDefaultTypeInternal;
extern AuthErrorDefaultTypeInternal _AuthError_default_instance_;
class AuthResponse;
class AuthResponseDefaultTypeInternal;
extern AuthResponseDefaultTypeInternal _AuthResponse_default_instance_;
class CastMessage;
class CastMessageDefaultTypeInternal;
extern CastMessageDefaultTypeInternal _CastMessage_default_instance_;
class DeviceAuthMessage;
class DeviceAuthMessageDefaultTypeInternal;
extern DeviceAuthMessageDefaultTypeInternal _DeviceAuthMessage_default_instance_;
}  // namespace cast_channel
}  // namespace core_api
}  // namespace extensions
PROTOBUF_NAMESPACE_OPEN
template<> ::extensions::core_api::cast_channel::AuthChallenge* Arena::CreateMaybeMessage<::extensions::core_api::cast_channel::AuthChallenge>(Arena*);
template<> ::extensions::core_api::cast_channel::AuthError* Arena::CreateMaybeMessage<::extensions::core_api::cast_channel::AuthError>(Arena*);
template<> ::extensions::core_api::cast_channel::AuthResponse* Arena::CreateMaybeMessage<::extensions::core_api::cast_channel::AuthResponse>(Arena*);
template<> ::extensions::core_api::cast_channel::CastMessage* Arena::CreateMaybeMessage<::extensions::core_api::cast_channel::CastMessage>(Arena*);
template<> ::extensions::core_api::cast_channel::DeviceAuthMessage* Arena::CreateMaybeMessage<::extensions::core_api::cast_channel::DeviceAuthMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace extensions {
namespace core_api {
namespace cast_channel {

enum CastMessage_ProtocolVersion : int {
  CastMessage_ProtocolVersion_CASTV2_1_0 = 0
};
bool CastMessage_ProtocolVersion_IsValid(int value);
constexpr CastMessage_ProtocolVersion CastMessage_ProtocolVersion_ProtocolVersion_MIN = CastMessage_ProtocolVersion_CASTV2_1_0;
constexpr CastMessage_ProtocolVersion CastMessage_ProtocolVersion_ProtocolVersion_MAX = CastMessage_ProtocolVersion_CASTV2_1_0;
constexpr int CastMessage_ProtocolVersion_ProtocolVersion_ARRAYSIZE = CastMessage_ProtocolVersion_ProtocolVersion_MAX + 1;

const std::string& CastMessage_ProtocolVersion_Name(CastMessage_ProtocolVersion value);
template<typename T>
inline const std::string& CastMessage_ProtocolVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CastMessage_ProtocolVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CastMessage_ProtocolVersion_Name.");
  return CastMessage_ProtocolVersion_Name(static_cast<CastMessage_ProtocolVersion>(enum_t_value));
}
bool CastMessage_ProtocolVersion_Parse(
    const std::string& name, CastMessage_ProtocolVersion* value);
enum CastMessage_PayloadType : int {
  CastMessage_PayloadType_STRING = 0,
  CastMessage_PayloadType_BINARY = 1
};
bool CastMessage_PayloadType_IsValid(int value);
constexpr CastMessage_PayloadType CastMessage_PayloadType_PayloadType_MIN = CastMessage_PayloadType_STRING;
constexpr CastMessage_PayloadType CastMessage_PayloadType_PayloadType_MAX = CastMessage_PayloadType_BINARY;
constexpr int CastMessage_PayloadType_PayloadType_ARRAYSIZE = CastMessage_PayloadType_PayloadType_MAX + 1;

const std::string& CastMessage_PayloadType_Name(CastMessage_PayloadType value);
template<typename T>
inline const std::string& CastMessage_PayloadType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CastMessage_PayloadType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CastMessage_PayloadType_Name.");
  return CastMessage_PayloadType_Name(static_cast<CastMessage_PayloadType>(enum_t_value));
}
bool CastMessage_PayloadType_Parse(
    const std::string& name, CastMessage_PayloadType* value);
enum AuthError_ErrorType : int {
  AuthError_ErrorType_INTERNAL_ERROR = 0,
  AuthError_ErrorType_NO_TLS = 1,
  AuthError_ErrorType_SIGNATURE_ALGORITHM_UNAVAILABLE = 2
};
bool AuthError_ErrorType_IsValid(int value);
constexpr AuthError_ErrorType AuthError_ErrorType_ErrorType_MIN = AuthError_ErrorType_INTERNAL_ERROR;
constexpr AuthError_ErrorType AuthError_ErrorType_ErrorType_MAX = AuthError_ErrorType_SIGNATURE_ALGORITHM_UNAVAILABLE;
constexpr int AuthError_ErrorType_ErrorType_ARRAYSIZE = AuthError_ErrorType_ErrorType_MAX + 1;

const std::string& AuthError_ErrorType_Name(AuthError_ErrorType value);
template<typename T>
inline const std::string& AuthError_ErrorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuthError_ErrorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuthError_ErrorType_Name.");
  return AuthError_ErrorType_Name(static_cast<AuthError_ErrorType>(enum_t_value));
}
bool AuthError_ErrorType_Parse(
    const std::string& name, AuthError_ErrorType* value);
enum SignatureAlgorithm : int {
  UNSPECIFIED = 0,
  RSASSA_PKCS1v15 = 1,
  RSASSA_PSS = 2
};
bool SignatureAlgorithm_IsValid(int value);
constexpr SignatureAlgorithm SignatureAlgorithm_MIN = UNSPECIFIED;
constexpr SignatureAlgorithm SignatureAlgorithm_MAX = RSASSA_PSS;
constexpr int SignatureAlgorithm_ARRAYSIZE = SignatureAlgorithm_MAX + 1;

const std::string& SignatureAlgorithm_Name(SignatureAlgorithm value);
template<typename T>
inline const std::string& SignatureAlgorithm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SignatureAlgorithm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SignatureAlgorithm_Name.");
  return SignatureAlgorithm_Name(static_cast<SignatureAlgorithm>(enum_t_value));
}
bool SignatureAlgorithm_Parse(
    const std::string& name, SignatureAlgorithm* value);
// ===================================================================

class CastMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:extensions.core_api.cast_channel.CastMessage) */ {
 public:
  CastMessage();
  virtual ~CastMessage();

  CastMessage(const CastMessage& from);
  CastMessage(CastMessage&& from) noexcept
    : CastMessage() {
    *this = ::std::move(from);
  }

  inline CastMessage& operator=(const CastMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CastMessage& operator=(CastMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CastMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CastMessage* internal_default_instance() {
    return reinterpret_cast<const CastMessage*>(
               &_CastMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CastMessage& a, CastMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CastMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CastMessage* New() const final {
    return CreateMaybeMessage<CastMessage>(nullptr);
  }

  CastMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CastMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CastMessage& from);
  void MergeFrom(const CastMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CastMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "extensions.core_api.cast_channel.CastMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CastMessage_ProtocolVersion ProtocolVersion;
  static constexpr ProtocolVersion CASTV2_1_0 =
    CastMessage_ProtocolVersion_CASTV2_1_0;
  static inline bool ProtocolVersion_IsValid(int value) {
    return CastMessage_ProtocolVersion_IsValid(value);
  }
  static constexpr ProtocolVersion ProtocolVersion_MIN =
    CastMessage_ProtocolVersion_ProtocolVersion_MIN;
  static constexpr ProtocolVersion ProtocolVersion_MAX =
    CastMessage_ProtocolVersion_ProtocolVersion_MAX;
  static constexpr int ProtocolVersion_ARRAYSIZE =
    CastMessage_ProtocolVersion_ProtocolVersion_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ProtocolVersion_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProtocolVersion>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProtocolVersion_Name.");
    return CastMessage_ProtocolVersion_Name(enum_t_value);
  }
  static inline bool ProtocolVersion_Parse(const std::string& name,
      ProtocolVersion* value) {
    return CastMessage_ProtocolVersion_Parse(name, value);
  }

  typedef CastMessage_PayloadType PayloadType;
  static constexpr PayloadType STRING =
    CastMessage_PayloadType_STRING;
  static constexpr PayloadType BINARY =
    CastMessage_PayloadType_BINARY;
  static inline bool PayloadType_IsValid(int value) {
    return CastMessage_PayloadType_IsValid(value);
  }
  static constexpr PayloadType PayloadType_MIN =
    CastMessage_PayloadType_PayloadType_MIN;
  static constexpr PayloadType PayloadType_MAX =
    CastMessage_PayloadType_PayloadType_MAX;
  static constexpr int PayloadType_ARRAYSIZE =
    CastMessage_PayloadType_PayloadType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PayloadType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PayloadType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PayloadType_Name.");
    return CastMessage_PayloadType_Name(enum_t_value);
  }
  static inline bool PayloadType_Parse(const std::string& name,
      PayloadType* value) {
    return CastMessage_PayloadType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 2,
    kDestinationIdFieldNumber = 3,
    kNamespaceFieldNumber = 4,
    kPayloadUtf8FieldNumber = 6,
    kPayloadBinaryFieldNumber = 7,
    kProtocolVersionFieldNumber = 1,
    kPayloadTypeFieldNumber = 5,
  };
  // required string source_id = 2;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const std::string& source_id() const;
  void set_source_id(const std::string& value);
  void set_source_id(std::string&& value);
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  std::string* mutable_source_id();
  std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // required string destination_id = 3;
  bool has_destination_id() const;
  private:
  bool _internal_has_destination_id() const;
  public:
  void clear_destination_id();
  const std::string& destination_id() const;
  void set_destination_id(const std::string& value);
  void set_destination_id(std::string&& value);
  void set_destination_id(const char* value);
  void set_destination_id(const char* value, size_t size);
  std::string* mutable_destination_id();
  std::string* release_destination_id();
  void set_allocated_destination_id(std::string* destination_id);
  private:
  const std::string& _internal_destination_id() const;
  void _internal_set_destination_id(const std::string& value);
  std::string* _internal_mutable_destination_id();
  public:

  // required string namespace = 4;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string payload_utf8 = 6;
  bool has_payload_utf8() const;
  private:
  bool _internal_has_payload_utf8() const;
  public:
  void clear_payload_utf8();
  const std::string& payload_utf8() const;
  void set_payload_utf8(const std::string& value);
  void set_payload_utf8(std::string&& value);
  void set_payload_utf8(const char* value);
  void set_payload_utf8(const char* value, size_t size);
  std::string* mutable_payload_utf8();
  std::string* release_payload_utf8();
  void set_allocated_payload_utf8(std::string* payload_utf8);
  private:
  const std::string& _internal_payload_utf8() const;
  void _internal_set_payload_utf8(const std::string& value);
  std::string* _internal_mutable_payload_utf8();
  public:

  // optional bytes payload_binary = 7;
  bool has_payload_binary() const;
  private:
  bool _internal_has_payload_binary() const;
  public:
  void clear_payload_binary();
  const std::string& payload_binary() const;
  void set_payload_binary(const std::string& value);
  void set_payload_binary(std::string&& value);
  void set_payload_binary(const char* value);
  void set_payload_binary(const void* value, size_t size);
  std::string* mutable_payload_binary();
  std::string* release_payload_binary();
  void set_allocated_payload_binary(std::string* payload_binary);
  private:
  const std::string& _internal_payload_binary() const;
  void _internal_set_payload_binary(const std::string& value);
  std::string* _internal_mutable_payload_binary();
  public:

  // required .extensions.core_api.cast_channel.CastMessage.ProtocolVersion protocol_version = 1;
  bool has_protocol_version() const;
  private:
  bool _internal_has_protocol_version() const;
  public:
  void clear_protocol_version();
  ::extensions::core_api::cast_channel::CastMessage_ProtocolVersion protocol_version() const;
  void set_protocol_version(::extensions::core_api::cast_channel::CastMessage_ProtocolVersion value);
  private:
  ::extensions::core_api::cast_channel::CastMessage_ProtocolVersion _internal_protocol_version() const;
  void _internal_set_protocol_version(::extensions::core_api::cast_channel::CastMessage_ProtocolVersion value);
  public:

  // required .extensions.core_api.cast_channel.CastMessage.PayloadType payload_type = 5;
  bool has_payload_type() const;
  private:
  bool _internal_has_payload_type() const;
  public:
  void clear_payload_type();
  ::extensions::core_api::cast_channel::CastMessage_PayloadType payload_type() const;
  void set_payload_type(::extensions::core_api::cast_channel::CastMessage_PayloadType value);
  private:
  ::extensions::core_api::cast_channel::CastMessage_PayloadType _internal_payload_type() const;
  void _internal_set_payload_type(::extensions::core_api::cast_channel::CastMessage_PayloadType value);
  public:

  // @@protoc_insertion_point(class_scope:extensions.core_api.cast_channel.CastMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_utf8_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_binary_;
  int protocol_version_;
  int payload_type_;
  friend struct ::TableStruct_cast_5fchannel_2eproto;
};
// -------------------------------------------------------------------

class AuthChallenge :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:extensions.core_api.cast_channel.AuthChallenge) */ {
 public:
  AuthChallenge();
  virtual ~AuthChallenge();

  AuthChallenge(const AuthChallenge& from);
  AuthChallenge(AuthChallenge&& from) noexcept
    : AuthChallenge() {
    *this = ::std::move(from);
  }

  inline AuthChallenge& operator=(const AuthChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthChallenge& operator=(AuthChallenge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AuthChallenge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthChallenge* internal_default_instance() {
    return reinterpret_cast<const AuthChallenge*>(
               &_AuthChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AuthChallenge& a, AuthChallenge& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthChallenge* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthChallenge* New() const final {
    return CreateMaybeMessage<AuthChallenge>(nullptr);
  }

  AuthChallenge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthChallenge>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AuthChallenge& from);
  void MergeFrom(const AuthChallenge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthChallenge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "extensions.core_api.cast_channel.AuthChallenge";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureAlgorithmFieldNumber = 1,
  };
  // optional .extensions.core_api.cast_channel.SignatureAlgorithm signature_algorithm = 1 [default = RSASSA_PKCS1v15];
  bool has_signature_algorithm() const;
  private:
  bool _internal_has_signature_algorithm() const;
  public:
  void clear_signature_algorithm();
  ::extensions::core_api::cast_channel::SignatureAlgorithm signature_algorithm() const;
  void set_signature_algorithm(::extensions::core_api::cast_channel::SignatureAlgorithm value);
  private:
  ::extensions::core_api::cast_channel::SignatureAlgorithm _internal_signature_algorithm() const;
  void _internal_set_signature_algorithm(::extensions::core_api::cast_channel::SignatureAlgorithm value);
  public:

  // @@protoc_insertion_point(class_scope:extensions.core_api.cast_channel.AuthChallenge)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int signature_algorithm_;
  friend struct ::TableStruct_cast_5fchannel_2eproto;
};
// -------------------------------------------------------------------

class AuthResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:extensions.core_api.cast_channel.AuthResponse) */ {
 public:
  AuthResponse();
  virtual ~AuthResponse();

  AuthResponse(const AuthResponse& from);
  AuthResponse(AuthResponse&& from) noexcept
    : AuthResponse() {
    *this = ::std::move(from);
  }

  inline AuthResponse& operator=(const AuthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthResponse& operator=(AuthResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AuthResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthResponse* internal_default_instance() {
    return reinterpret_cast<const AuthResponse*>(
               &_AuthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AuthResponse& a, AuthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthResponse* New() const final {
    return CreateMaybeMessage<AuthResponse>(nullptr);
  }

  AuthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AuthResponse& from);
  void MergeFrom(const AuthResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "extensions.core_api.cast_channel.AuthResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntermediateCertificateFieldNumber = 3,
    kSignatureFieldNumber = 1,
    kClientAuthCertificateFieldNumber = 2,
    kSignatureAlgorithmFieldNumber = 4,
  };
  // repeated bytes intermediate_certificate = 3;
  int intermediate_certificate_size() const;
  private:
  int _internal_intermediate_certificate_size() const;
  public:
  void clear_intermediate_certificate();
  const std::string& intermediate_certificate(int index) const;
  std::string* mutable_intermediate_certificate(int index);
  void set_intermediate_certificate(int index, const std::string& value);
  void set_intermediate_certificate(int index, std::string&& value);
  void set_intermediate_certificate(int index, const char* value);
  void set_intermediate_certificate(int index, const void* value, size_t size);
  std::string* add_intermediate_certificate();
  void add_intermediate_certificate(const std::string& value);
  void add_intermediate_certificate(std::string&& value);
  void add_intermediate_certificate(const char* value);
  void add_intermediate_certificate(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& intermediate_certificate() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_intermediate_certificate();
  private:
  const std::string& _internal_intermediate_certificate(int index) const;
  std::string* _internal_add_intermediate_certificate();
  public:

  // required bytes signature = 1;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // required bytes client_auth_certificate = 2;
  bool has_client_auth_certificate() const;
  private:
  bool _internal_has_client_auth_certificate() const;
  public:
  void clear_client_auth_certificate();
  const std::string& client_auth_certificate() const;
  void set_client_auth_certificate(const std::string& value);
  void set_client_auth_certificate(std::string&& value);
  void set_client_auth_certificate(const char* value);
  void set_client_auth_certificate(const void* value, size_t size);
  std::string* mutable_client_auth_certificate();
  std::string* release_client_auth_certificate();
  void set_allocated_client_auth_certificate(std::string* client_auth_certificate);
  private:
  const std::string& _internal_client_auth_certificate() const;
  void _internal_set_client_auth_certificate(const std::string& value);
  std::string* _internal_mutable_client_auth_certificate();
  public:

  // optional .extensions.core_api.cast_channel.SignatureAlgorithm signature_algorithm = 4 [default = RSASSA_PKCS1v15];
  bool has_signature_algorithm() const;
  private:
  bool _internal_has_signature_algorithm() const;
  public:
  void clear_signature_algorithm();
  ::extensions::core_api::cast_channel::SignatureAlgorithm signature_algorithm() const;
  void set_signature_algorithm(::extensions::core_api::cast_channel::SignatureAlgorithm value);
  private:
  ::extensions::core_api::cast_channel::SignatureAlgorithm _internal_signature_algorithm() const;
  void _internal_set_signature_algorithm(::extensions::core_api::cast_channel::SignatureAlgorithm value);
  public:

  // @@protoc_insertion_point(class_scope:extensions.core_api.cast_channel.AuthResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> intermediate_certificate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_auth_certificate_;
  int signature_algorithm_;
  friend struct ::TableStruct_cast_5fchannel_2eproto;
};
// -------------------------------------------------------------------

class AuthError :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:extensions.core_api.cast_channel.AuthError) */ {
 public:
  AuthError();
  virtual ~AuthError();

  AuthError(const AuthError& from);
  AuthError(AuthError&& from) noexcept
    : AuthError() {
    *this = ::std::move(from);
  }

  inline AuthError& operator=(const AuthError& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthError& operator=(AuthError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AuthError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthError* internal_default_instance() {
    return reinterpret_cast<const AuthError*>(
               &_AuthError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuthError& a, AuthError& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthError* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthError* New() const final {
    return CreateMaybeMessage<AuthError>(nullptr);
  }

  AuthError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthError>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AuthError& from);
  void MergeFrom(const AuthError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "extensions.core_api.cast_channel.AuthError";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AuthError_ErrorType ErrorType;
  static constexpr ErrorType INTERNAL_ERROR =
    AuthError_ErrorType_INTERNAL_ERROR;
  static constexpr ErrorType NO_TLS =
    AuthError_ErrorType_NO_TLS;
  static constexpr ErrorType SIGNATURE_ALGORITHM_UNAVAILABLE =
    AuthError_ErrorType_SIGNATURE_ALGORITHM_UNAVAILABLE;
  static inline bool ErrorType_IsValid(int value) {
    return AuthError_ErrorType_IsValid(value);
  }
  static constexpr ErrorType ErrorType_MIN =
    AuthError_ErrorType_ErrorType_MIN;
  static constexpr ErrorType ErrorType_MAX =
    AuthError_ErrorType_ErrorType_MAX;
  static constexpr int ErrorType_ARRAYSIZE =
    AuthError_ErrorType_ErrorType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ErrorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorType_Name.");
    return AuthError_ErrorType_Name(enum_t_value);
  }
  static inline bool ErrorType_Parse(const std::string& name,
      ErrorType* value) {
    return AuthError_ErrorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrorTypeFieldNumber = 1,
  };
  // required .extensions.core_api.cast_channel.AuthError.ErrorType error_type = 1;
  bool has_error_type() const;
  private:
  bool _internal_has_error_type() const;
  public:
  void clear_error_type();
  ::extensions::core_api::cast_channel::AuthError_ErrorType error_type() const;
  void set_error_type(::extensions::core_api::cast_channel::AuthError_ErrorType value);
  private:
  ::extensions::core_api::cast_channel::AuthError_ErrorType _internal_error_type() const;
  void _internal_set_error_type(::extensions::core_api::cast_channel::AuthError_ErrorType value);
  public:

  // @@protoc_insertion_point(class_scope:extensions.core_api.cast_channel.AuthError)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int error_type_;
  friend struct ::TableStruct_cast_5fchannel_2eproto;
};
// -------------------------------------------------------------------

class DeviceAuthMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:extensions.core_api.cast_channel.DeviceAuthMessage) */ {
 public:
  DeviceAuthMessage();
  virtual ~DeviceAuthMessage();

  DeviceAuthMessage(const DeviceAuthMessage& from);
  DeviceAuthMessage(DeviceAuthMessage&& from) noexcept
    : DeviceAuthMessage() {
    *this = ::std::move(from);
  }

  inline DeviceAuthMessage& operator=(const DeviceAuthMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceAuthMessage& operator=(DeviceAuthMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DeviceAuthMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceAuthMessage* internal_default_instance() {
    return reinterpret_cast<const DeviceAuthMessage*>(
               &_DeviceAuthMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeviceAuthMessage& a, DeviceAuthMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceAuthMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceAuthMessage* New() const final {
    return CreateMaybeMessage<DeviceAuthMessage>(nullptr);
  }

  DeviceAuthMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceAuthMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceAuthMessage& from);
  void MergeFrom(const DeviceAuthMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceAuthMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "extensions.core_api.cast_channel.DeviceAuthMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChallengeFieldNumber = 1,
    kResponseFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // optional .extensions.core_api.cast_channel.AuthChallenge challenge = 1;
  bool has_challenge() const;
  private:
  bool _internal_has_challenge() const;
  public:
  void clear_challenge();
  const ::extensions::core_api::cast_channel::AuthChallenge& challenge() const;
  ::extensions::core_api::cast_channel::AuthChallenge* release_challenge();
  ::extensions::core_api::cast_channel::AuthChallenge* mutable_challenge();
  void set_allocated_challenge(::extensions::core_api::cast_channel::AuthChallenge* challenge);
  private:
  const ::extensions::core_api::cast_channel::AuthChallenge& _internal_challenge() const;
  ::extensions::core_api::cast_channel::AuthChallenge* _internal_mutable_challenge();
  public:

  // optional .extensions.core_api.cast_channel.AuthResponse response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::extensions::core_api::cast_channel::AuthResponse& response() const;
  ::extensions::core_api::cast_channel::AuthResponse* release_response();
  ::extensions::core_api::cast_channel::AuthResponse* mutable_response();
  void set_allocated_response(::extensions::core_api::cast_channel::AuthResponse* response);
  private:
  const ::extensions::core_api::cast_channel::AuthResponse& _internal_response() const;
  ::extensions::core_api::cast_channel::AuthResponse* _internal_mutable_response();
  public:

  // optional .extensions.core_api.cast_channel.AuthError error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::extensions::core_api::cast_channel::AuthError& error() const;
  ::extensions::core_api::cast_channel::AuthError* release_error();
  ::extensions::core_api::cast_channel::AuthError* mutable_error();
  void set_allocated_error(::extensions::core_api::cast_channel::AuthError* error);
  private:
  const ::extensions::core_api::cast_channel::AuthError& _internal_error() const;
  ::extensions::core_api::cast_channel::AuthError* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:extensions.core_api.cast_channel.DeviceAuthMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::extensions::core_api::cast_channel::AuthChallenge* challenge_;
  ::extensions::core_api::cast_channel::AuthResponse* response_;
  ::extensions::core_api::cast_channel::AuthError* error_;
  friend struct ::TableStruct_cast_5fchannel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CastMessage

// required .extensions.core_api.cast_channel.CastMessage.ProtocolVersion protocol_version = 1;
inline bool CastMessage::_internal_has_protocol_version() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CastMessage::has_protocol_version() const {
  return _internal_has_protocol_version();
}
inline void CastMessage::clear_protocol_version() {
  protocol_version_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::extensions::core_api::cast_channel::CastMessage_ProtocolVersion CastMessage::_internal_protocol_version() const {
  return static_cast< ::extensions::core_api::cast_channel::CastMessage_ProtocolVersion >(protocol_version_);
}
inline ::extensions::core_api::cast_channel::CastMessage_ProtocolVersion CastMessage::protocol_version() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.CastMessage.protocol_version)
  return _internal_protocol_version();
}
inline void CastMessage::_internal_set_protocol_version(::extensions::core_api::cast_channel::CastMessage_ProtocolVersion value) {
  assert(::extensions::core_api::cast_channel::CastMessage_ProtocolVersion_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  protocol_version_ = value;
}
inline void CastMessage::set_protocol_version(::extensions::core_api::cast_channel::CastMessage_ProtocolVersion value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.CastMessage.protocol_version)
}

// required string source_id = 2;
inline bool CastMessage::_internal_has_source_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CastMessage::has_source_id() const {
  return _internal_has_source_id();
}
inline void CastMessage::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CastMessage::source_id() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.CastMessage.source_id)
  return _internal_source_id();
}
inline void CastMessage::set_source_id(const std::string& value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.CastMessage.source_id)
}
inline std::string* CastMessage::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.CastMessage.source_id)
  return _internal_mutable_source_id();
}
inline const std::string& CastMessage::_internal_source_id() const {
  return source_id_.GetNoArena();
}
inline void CastMessage::_internal_set_source_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CastMessage::set_source_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:extensions.core_api.cast_channel.CastMessage.source_id)
}
inline void CastMessage::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:extensions.core_api.cast_channel.CastMessage.source_id)
}
inline void CastMessage::set_source_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:extensions.core_api.cast_channel.CastMessage.source_id)
}
inline std::string* CastMessage::_internal_mutable_source_id() {
  _has_bits_[0] |= 0x00000001u;
  return source_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CastMessage::release_source_id() {
  // @@protoc_insertion_point(field_release:extensions.core_api.cast_channel.CastMessage.source_id)
  if (!_internal_has_source_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CastMessage::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.CastMessage.source_id)
}

// required string destination_id = 3;
inline bool CastMessage::_internal_has_destination_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CastMessage::has_destination_id() const {
  return _internal_has_destination_id();
}
inline void CastMessage::clear_destination_id() {
  destination_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CastMessage::destination_id() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.CastMessage.destination_id)
  return _internal_destination_id();
}
inline void CastMessage::set_destination_id(const std::string& value) {
  _internal_set_destination_id(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.CastMessage.destination_id)
}
inline std::string* CastMessage::mutable_destination_id() {
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.CastMessage.destination_id)
  return _internal_mutable_destination_id();
}
inline const std::string& CastMessage::_internal_destination_id() const {
  return destination_id_.GetNoArena();
}
inline void CastMessage::_internal_set_destination_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  destination_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CastMessage::set_destination_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  destination_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:extensions.core_api.cast_channel.CastMessage.destination_id)
}
inline void CastMessage::set_destination_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  destination_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:extensions.core_api.cast_channel.CastMessage.destination_id)
}
inline void CastMessage::set_destination_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  destination_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:extensions.core_api.cast_channel.CastMessage.destination_id)
}
inline std::string* CastMessage::_internal_mutable_destination_id() {
  _has_bits_[0] |= 0x00000002u;
  return destination_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CastMessage::release_destination_id() {
  // @@protoc_insertion_point(field_release:extensions.core_api.cast_channel.CastMessage.destination_id)
  if (!_internal_has_destination_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return destination_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CastMessage::set_allocated_destination_id(std::string* destination_id) {
  if (destination_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  destination_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination_id);
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.CastMessage.destination_id)
}

// required string namespace = 4;
inline bool CastMessage::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CastMessage::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void CastMessage::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CastMessage::namespace_() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.CastMessage.namespace)
  return _internal_namespace_();
}
inline void CastMessage::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.CastMessage.namespace)
}
inline std::string* CastMessage::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.CastMessage.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& CastMessage::_internal_namespace_() const {
  return namespace__.GetNoArena();
}
inline void CastMessage::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  namespace__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CastMessage::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  namespace__.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:extensions.core_api.cast_channel.CastMessage.namespace)
}
inline void CastMessage::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  namespace__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:extensions.core_api.cast_channel.CastMessage.namespace)
}
inline void CastMessage::set_namespace_(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  namespace__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:extensions.core_api.cast_channel.CastMessage.namespace)
}
inline std::string* CastMessage::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000004u;
  return namespace__.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CastMessage::release_namespace_() {
  // @@protoc_insertion_point(field_release:extensions.core_api.cast_channel.CastMessage.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return namespace__.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CastMessage::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  namespace__.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.CastMessage.namespace)
}

// required .extensions.core_api.cast_channel.CastMessage.PayloadType payload_type = 5;
inline bool CastMessage::_internal_has_payload_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CastMessage::has_payload_type() const {
  return _internal_has_payload_type();
}
inline void CastMessage::clear_payload_type() {
  payload_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::extensions::core_api::cast_channel::CastMessage_PayloadType CastMessage::_internal_payload_type() const {
  return static_cast< ::extensions::core_api::cast_channel::CastMessage_PayloadType >(payload_type_);
}
inline ::extensions::core_api::cast_channel::CastMessage_PayloadType CastMessage::payload_type() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.CastMessage.payload_type)
  return _internal_payload_type();
}
inline void CastMessage::_internal_set_payload_type(::extensions::core_api::cast_channel::CastMessage_PayloadType value) {
  assert(::extensions::core_api::cast_channel::CastMessage_PayloadType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  payload_type_ = value;
}
inline void CastMessage::set_payload_type(::extensions::core_api::cast_channel::CastMessage_PayloadType value) {
  _internal_set_payload_type(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.CastMessage.payload_type)
}

// optional string payload_utf8 = 6;
inline bool CastMessage::_internal_has_payload_utf8() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CastMessage::has_payload_utf8() const {
  return _internal_has_payload_utf8();
}
inline void CastMessage::clear_payload_utf8() {
  payload_utf8_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CastMessage::payload_utf8() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.CastMessage.payload_utf8)
  return _internal_payload_utf8();
}
inline void CastMessage::set_payload_utf8(const std::string& value) {
  _internal_set_payload_utf8(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.CastMessage.payload_utf8)
}
inline std::string* CastMessage::mutable_payload_utf8() {
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.CastMessage.payload_utf8)
  return _internal_mutable_payload_utf8();
}
inline const std::string& CastMessage::_internal_payload_utf8() const {
  return payload_utf8_.GetNoArena();
}
inline void CastMessage::_internal_set_payload_utf8(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  payload_utf8_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CastMessage::set_payload_utf8(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  payload_utf8_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:extensions.core_api.cast_channel.CastMessage.payload_utf8)
}
inline void CastMessage::set_payload_utf8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  payload_utf8_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:extensions.core_api.cast_channel.CastMessage.payload_utf8)
}
inline void CastMessage::set_payload_utf8(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  payload_utf8_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:extensions.core_api.cast_channel.CastMessage.payload_utf8)
}
inline std::string* CastMessage::_internal_mutable_payload_utf8() {
  _has_bits_[0] |= 0x00000008u;
  return payload_utf8_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CastMessage::release_payload_utf8() {
  // @@protoc_insertion_point(field_release:extensions.core_api.cast_channel.CastMessage.payload_utf8)
  if (!_internal_has_payload_utf8()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return payload_utf8_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CastMessage::set_allocated_payload_utf8(std::string* payload_utf8) {
  if (payload_utf8 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  payload_utf8_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_utf8);
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.CastMessage.payload_utf8)
}

// optional bytes payload_binary = 7;
inline bool CastMessage::_internal_has_payload_binary() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CastMessage::has_payload_binary() const {
  return _internal_has_payload_binary();
}
inline void CastMessage::clear_payload_binary() {
  payload_binary_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CastMessage::payload_binary() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.CastMessage.payload_binary)
  return _internal_payload_binary();
}
inline void CastMessage::set_payload_binary(const std::string& value) {
  _internal_set_payload_binary(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.CastMessage.payload_binary)
}
inline std::string* CastMessage::mutable_payload_binary() {
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.CastMessage.payload_binary)
  return _internal_mutable_payload_binary();
}
inline const std::string& CastMessage::_internal_payload_binary() const {
  return payload_binary_.GetNoArena();
}
inline void CastMessage::_internal_set_payload_binary(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  payload_binary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CastMessage::set_payload_binary(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  payload_binary_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:extensions.core_api.cast_channel.CastMessage.payload_binary)
}
inline void CastMessage::set_payload_binary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  payload_binary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:extensions.core_api.cast_channel.CastMessage.payload_binary)
}
inline void CastMessage::set_payload_binary(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  payload_binary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:extensions.core_api.cast_channel.CastMessage.payload_binary)
}
inline std::string* CastMessage::_internal_mutable_payload_binary() {
  _has_bits_[0] |= 0x00000010u;
  return payload_binary_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CastMessage::release_payload_binary() {
  // @@protoc_insertion_point(field_release:extensions.core_api.cast_channel.CastMessage.payload_binary)
  if (!_internal_has_payload_binary()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return payload_binary_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CastMessage::set_allocated_payload_binary(std::string* payload_binary) {
  if (payload_binary != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  payload_binary_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_binary);
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.CastMessage.payload_binary)
}

// -------------------------------------------------------------------

// AuthChallenge

// optional .extensions.core_api.cast_channel.SignatureAlgorithm signature_algorithm = 1 [default = RSASSA_PKCS1v15];
inline bool AuthChallenge::_internal_has_signature_algorithm() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthChallenge::has_signature_algorithm() const {
  return _internal_has_signature_algorithm();
}
inline void AuthChallenge::clear_signature_algorithm() {
  signature_algorithm_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::extensions::core_api::cast_channel::SignatureAlgorithm AuthChallenge::_internal_signature_algorithm() const {
  return static_cast< ::extensions::core_api::cast_channel::SignatureAlgorithm >(signature_algorithm_);
}
inline ::extensions::core_api::cast_channel::SignatureAlgorithm AuthChallenge::signature_algorithm() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.AuthChallenge.signature_algorithm)
  return _internal_signature_algorithm();
}
inline void AuthChallenge::_internal_set_signature_algorithm(::extensions::core_api::cast_channel::SignatureAlgorithm value) {
  assert(::extensions::core_api::cast_channel::SignatureAlgorithm_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  signature_algorithm_ = value;
}
inline void AuthChallenge::set_signature_algorithm(::extensions::core_api::cast_channel::SignatureAlgorithm value) {
  _internal_set_signature_algorithm(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.AuthChallenge.signature_algorithm)
}

// -------------------------------------------------------------------

// AuthResponse

// required bytes signature = 1;
inline bool AuthResponse::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthResponse::has_signature() const {
  return _internal_has_signature();
}
inline void AuthResponse::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthResponse::signature() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.AuthResponse.signature)
  return _internal_signature();
}
inline void AuthResponse::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.AuthResponse.signature)
}
inline std::string* AuthResponse::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.AuthResponse.signature)
  return _internal_mutable_signature();
}
inline const std::string& AuthResponse::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void AuthResponse::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthResponse::set_signature(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:extensions.core_api.cast_channel.AuthResponse.signature)
}
inline void AuthResponse::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:extensions.core_api.cast_channel.AuthResponse.signature)
}
inline void AuthResponse::set_signature(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:extensions.core_api.cast_channel.AuthResponse.signature)
}
inline std::string* AuthResponse::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000001u;
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthResponse::release_signature() {
  // @@protoc_insertion_point(field_release:extensions.core_api.cast_channel.AuthResponse.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return signature_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.AuthResponse.signature)
}

// required bytes client_auth_certificate = 2;
inline bool AuthResponse::_internal_has_client_auth_certificate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthResponse::has_client_auth_certificate() const {
  return _internal_has_client_auth_certificate();
}
inline void AuthResponse::clear_client_auth_certificate() {
  client_auth_certificate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AuthResponse::client_auth_certificate() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.AuthResponse.client_auth_certificate)
  return _internal_client_auth_certificate();
}
inline void AuthResponse::set_client_auth_certificate(const std::string& value) {
  _internal_set_client_auth_certificate(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.AuthResponse.client_auth_certificate)
}
inline std::string* AuthResponse::mutable_client_auth_certificate() {
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.AuthResponse.client_auth_certificate)
  return _internal_mutable_client_auth_certificate();
}
inline const std::string& AuthResponse::_internal_client_auth_certificate() const {
  return client_auth_certificate_.GetNoArena();
}
inline void AuthResponse::_internal_set_client_auth_certificate(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  client_auth_certificate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthResponse::set_client_auth_certificate(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  client_auth_certificate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:extensions.core_api.cast_channel.AuthResponse.client_auth_certificate)
}
inline void AuthResponse::set_client_auth_certificate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  client_auth_certificate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:extensions.core_api.cast_channel.AuthResponse.client_auth_certificate)
}
inline void AuthResponse::set_client_auth_certificate(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  client_auth_certificate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:extensions.core_api.cast_channel.AuthResponse.client_auth_certificate)
}
inline std::string* AuthResponse::_internal_mutable_client_auth_certificate() {
  _has_bits_[0] |= 0x00000002u;
  return client_auth_certificate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthResponse::release_client_auth_certificate() {
  // @@protoc_insertion_point(field_release:extensions.core_api.cast_channel.AuthResponse.client_auth_certificate)
  if (!_internal_has_client_auth_certificate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return client_auth_certificate_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_client_auth_certificate(std::string* client_auth_certificate) {
  if (client_auth_certificate != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_auth_certificate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_auth_certificate);
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.AuthResponse.client_auth_certificate)
}

// repeated bytes intermediate_certificate = 3;
inline int AuthResponse::_internal_intermediate_certificate_size() const {
  return intermediate_certificate_.size();
}
inline int AuthResponse::intermediate_certificate_size() const {
  return _internal_intermediate_certificate_size();
}
inline void AuthResponse::clear_intermediate_certificate() {
  intermediate_certificate_.Clear();
}
inline std::string* AuthResponse::add_intermediate_certificate() {
  // @@protoc_insertion_point(field_add_mutable:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
  return _internal_add_intermediate_certificate();
}
inline const std::string& AuthResponse::_internal_intermediate_certificate(int index) const {
  return intermediate_certificate_.Get(index);
}
inline const std::string& AuthResponse::intermediate_certificate(int index) const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
  return _internal_intermediate_certificate(index);
}
inline std::string* AuthResponse::mutable_intermediate_certificate(int index) {
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
  return intermediate_certificate_.Mutable(index);
}
inline void AuthResponse::set_intermediate_certificate(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
  intermediate_certificate_.Mutable(index)->assign(value);
}
inline void AuthResponse::set_intermediate_certificate(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
  intermediate_certificate_.Mutable(index)->assign(std::move(value));
}
inline void AuthResponse::set_intermediate_certificate(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  intermediate_certificate_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
}
inline void AuthResponse::set_intermediate_certificate(int index, const void* value, size_t size) {
  intermediate_certificate_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
}
inline std::string* AuthResponse::_internal_add_intermediate_certificate() {
  return intermediate_certificate_.Add();
}
inline void AuthResponse::add_intermediate_certificate(const std::string& value) {
  intermediate_certificate_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
}
inline void AuthResponse::add_intermediate_certificate(std::string&& value) {
  intermediate_certificate_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
}
inline void AuthResponse::add_intermediate_certificate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  intermediate_certificate_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
}
inline void AuthResponse::add_intermediate_certificate(const void* value, size_t size) {
  intermediate_certificate_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AuthResponse::intermediate_certificate() const {
  // @@protoc_insertion_point(field_list:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
  return intermediate_certificate_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AuthResponse::mutable_intermediate_certificate() {
  // @@protoc_insertion_point(field_mutable_list:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
  return &intermediate_certificate_;
}

// optional .extensions.core_api.cast_channel.SignatureAlgorithm signature_algorithm = 4 [default = RSASSA_PKCS1v15];
inline bool AuthResponse::_internal_has_signature_algorithm() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthResponse::has_signature_algorithm() const {
  return _internal_has_signature_algorithm();
}
inline void AuthResponse::clear_signature_algorithm() {
  signature_algorithm_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::extensions::core_api::cast_channel::SignatureAlgorithm AuthResponse::_internal_signature_algorithm() const {
  return static_cast< ::extensions::core_api::cast_channel::SignatureAlgorithm >(signature_algorithm_);
}
inline ::extensions::core_api::cast_channel::SignatureAlgorithm AuthResponse::signature_algorithm() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.AuthResponse.signature_algorithm)
  return _internal_signature_algorithm();
}
inline void AuthResponse::_internal_set_signature_algorithm(::extensions::core_api::cast_channel::SignatureAlgorithm value) {
  assert(::extensions::core_api::cast_channel::SignatureAlgorithm_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  signature_algorithm_ = value;
}
inline void AuthResponse::set_signature_algorithm(::extensions::core_api::cast_channel::SignatureAlgorithm value) {
  _internal_set_signature_algorithm(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.AuthResponse.signature_algorithm)
}

// -------------------------------------------------------------------

// AuthError

// required .extensions.core_api.cast_channel.AuthError.ErrorType error_type = 1;
inline bool AuthError::_internal_has_error_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthError::has_error_type() const {
  return _internal_has_error_type();
}
inline void AuthError::clear_error_type() {
  error_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::extensions::core_api::cast_channel::AuthError_ErrorType AuthError::_internal_error_type() const {
  return static_cast< ::extensions::core_api::cast_channel::AuthError_ErrorType >(error_type_);
}
inline ::extensions::core_api::cast_channel::AuthError_ErrorType AuthError::error_type() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.AuthError.error_type)
  return _internal_error_type();
}
inline void AuthError::_internal_set_error_type(::extensions::core_api::cast_channel::AuthError_ErrorType value) {
  assert(::extensions::core_api::cast_channel::AuthError_ErrorType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  error_type_ = value;
}
inline void AuthError::set_error_type(::extensions::core_api::cast_channel::AuthError_ErrorType value) {
  _internal_set_error_type(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.AuthError.error_type)
}

// -------------------------------------------------------------------

// DeviceAuthMessage

// optional .extensions.core_api.cast_channel.AuthChallenge challenge = 1;
inline bool DeviceAuthMessage::_internal_has_challenge() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || challenge_ != nullptr);
  return value;
}
inline bool DeviceAuthMessage::has_challenge() const {
  return _internal_has_challenge();
}
inline void DeviceAuthMessage::clear_challenge() {
  if (challenge_ != nullptr) challenge_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::extensions::core_api::cast_channel::AuthChallenge& DeviceAuthMessage::_internal_challenge() const {
  const ::extensions::core_api::cast_channel::AuthChallenge* p = challenge_;
  return p != nullptr ? *p : *reinterpret_cast<const ::extensions::core_api::cast_channel::AuthChallenge*>(
      &::extensions::core_api::cast_channel::_AuthChallenge_default_instance_);
}
inline const ::extensions::core_api::cast_channel::AuthChallenge& DeviceAuthMessage::challenge() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.DeviceAuthMessage.challenge)
  return _internal_challenge();
}
inline ::extensions::core_api::cast_channel::AuthChallenge* DeviceAuthMessage::release_challenge() {
  // @@protoc_insertion_point(field_release:extensions.core_api.cast_channel.DeviceAuthMessage.challenge)
  _has_bits_[0] &= ~0x00000001u;
  ::extensions::core_api::cast_channel::AuthChallenge* temp = challenge_;
  challenge_ = nullptr;
  return temp;
}
inline ::extensions::core_api::cast_channel::AuthChallenge* DeviceAuthMessage::_internal_mutable_challenge() {
  _has_bits_[0] |= 0x00000001u;
  if (challenge_ == nullptr) {
    auto* p = CreateMaybeMessage<::extensions::core_api::cast_channel::AuthChallenge>(GetArenaNoVirtual());
    challenge_ = p;
  }
  return challenge_;
}
inline ::extensions::core_api::cast_channel::AuthChallenge* DeviceAuthMessage::mutable_challenge() {
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.DeviceAuthMessage.challenge)
  return _internal_mutable_challenge();
}
inline void DeviceAuthMessage::set_allocated_challenge(::extensions::core_api::cast_channel::AuthChallenge* challenge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete challenge_;
  }
  if (challenge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      challenge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, challenge, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  challenge_ = challenge;
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.DeviceAuthMessage.challenge)
}

// optional .extensions.core_api.cast_channel.AuthResponse response = 2;
inline bool DeviceAuthMessage::_internal_has_response() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || response_ != nullptr);
  return value;
}
inline bool DeviceAuthMessage::has_response() const {
  return _internal_has_response();
}
inline void DeviceAuthMessage::clear_response() {
  if (response_ != nullptr) response_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::extensions::core_api::cast_channel::AuthResponse& DeviceAuthMessage::_internal_response() const {
  const ::extensions::core_api::cast_channel::AuthResponse* p = response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::extensions::core_api::cast_channel::AuthResponse*>(
      &::extensions::core_api::cast_channel::_AuthResponse_default_instance_);
}
inline const ::extensions::core_api::cast_channel::AuthResponse& DeviceAuthMessage::response() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.DeviceAuthMessage.response)
  return _internal_response();
}
inline ::extensions::core_api::cast_channel::AuthResponse* DeviceAuthMessage::release_response() {
  // @@protoc_insertion_point(field_release:extensions.core_api.cast_channel.DeviceAuthMessage.response)
  _has_bits_[0] &= ~0x00000002u;
  ::extensions::core_api::cast_channel::AuthResponse* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::extensions::core_api::cast_channel::AuthResponse* DeviceAuthMessage::_internal_mutable_response() {
  _has_bits_[0] |= 0x00000002u;
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::extensions::core_api::cast_channel::AuthResponse>(GetArenaNoVirtual());
    response_ = p;
  }
  return response_;
}
inline ::extensions::core_api::cast_channel::AuthResponse* DeviceAuthMessage::mutable_response() {
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.DeviceAuthMessage.response)
  return _internal_mutable_response();
}
inline void DeviceAuthMessage::set_allocated_response(::extensions::core_api::cast_channel::AuthResponse* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.DeviceAuthMessage.response)
}

// optional .extensions.core_api.cast_channel.AuthError error = 3;
inline bool DeviceAuthMessage::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || error_ != nullptr);
  return value;
}
inline bool DeviceAuthMessage::has_error() const {
  return _internal_has_error();
}
inline void DeviceAuthMessage::clear_error() {
  if (error_ != nullptr) error_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::extensions::core_api::cast_channel::AuthError& DeviceAuthMessage::_internal_error() const {
  const ::extensions::core_api::cast_channel::AuthError* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::extensions::core_api::cast_channel::AuthError*>(
      &::extensions::core_api::cast_channel::_AuthError_default_instance_);
}
inline const ::extensions::core_api::cast_channel::AuthError& DeviceAuthMessage::error() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.DeviceAuthMessage.error)
  return _internal_error();
}
inline ::extensions::core_api::cast_channel::AuthError* DeviceAuthMessage::release_error() {
  // @@protoc_insertion_point(field_release:extensions.core_api.cast_channel.DeviceAuthMessage.error)
  _has_bits_[0] &= ~0x00000004u;
  ::extensions::core_api::cast_channel::AuthError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::extensions::core_api::cast_channel::AuthError* DeviceAuthMessage::_internal_mutable_error() {
  _has_bits_[0] |= 0x00000004u;
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::extensions::core_api::cast_channel::AuthError>(GetArenaNoVirtual());
    error_ = p;
  }
  return error_;
}
inline ::extensions::core_api::cast_channel::AuthError* DeviceAuthMessage::mutable_error() {
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.DeviceAuthMessage.error)
  return _internal_mutable_error();
}
inline void DeviceAuthMessage::set_allocated_error(::extensions::core_api::cast_channel::AuthError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.DeviceAuthMessage.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cast_channel
}  // namespace core_api
}  // namespace extensions

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::extensions::core_api::cast_channel::CastMessage_ProtocolVersion> : ::std::true_type {};
template <> struct is_proto_enum< ::extensions::core_api::cast_channel::CastMessage_PayloadType> : ::std::true_type {};
template <> struct is_proto_enum< ::extensions::core_api::cast_channel::AuthError_ErrorType> : ::std::true_type {};
template <> struct is_proto_enum< ::extensions::core_api::cast_channel::SignatureAlgorithm> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cast_5fchannel_2eproto
